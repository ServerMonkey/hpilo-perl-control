#!/bin/sh

# help
if [ -z "${1}" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    echo "Manage HP Servers via iLO."
    echo "List all available scripts:"
    echo "  hpilo list"
    echo "Usage:"
    echo "  hpilo <HOST> <USER> <PASS> <XML_SCRIPT> <FIND_STRING> -u"
    echo "Example:"
    echo "  hpilo sqlserver peteradmin l33tpass Get_PowerCap.xml 'Power'"
    echo "Add '-u' after FIND_STRING to sort and remove duplicated lines."
    echo "Put your own custom xml scripts in ~/.hpilo-scripts ."
    echo "Put firmware/bios update files in ~/.hpilo-scripts/firmware ."
    echo "Good practice is to copy a script from /var/lib/hpilo-perl-control"
    echo "to ~/.hpilo-scripts and modify it."
    exit 0
fi

# must run as normal user
if [ "$(id -u)" = 0 ]; then
    echo 'This script must be run as a normal user, not root!' >&2
    exit 1
fi

# need to go to HOME directoy for XML path to work
cd "$HOME" || exit 1

# variables
ILO_HOST="$1"
ILO_USER="$2"
ILO_PASS="$3"
XML_SCRIPT="$4"
FIND_DATA="$5"
FIND_UNIQ="$6"

if [ -z "$1" ]; then
    echo "Please provide the parameter ILO_HOST"
    exit 1
fi

if [ -z "$2" ]; then
    echo "Please provide the parameter ILO_USER"
    exit 1
fi

if [ -z "$3" ]; then
    echo "Please provide the parameter ILO_PASS"
    exit 1
fi

if [ -z "$4" ]; then
    echo "Please provide the parameter XML_SCRIPT"
    exit 1
fi

# get the directory name of the scripts exe
APP_DIR_FULL=$(realpath "$0")
APP_DIR=$(dirname "$APP_DIR_FULL")

# path variables
SCRIPTS_USER="$HOME/.hpilo-scripts"
SCRIPTS_ALL="/var/lib/hpilo-perl-control"
SCRIPTS_APP_DIR="$APP_DIR/scripts"

# list all available scripts
if [ "$1" = "list" ]; then
    echo "Global Scripts:"
    echo "---------------"
    ls -d "$SCRIPTS_ALL"/*.xml 2>/dev/null
    echo ""
    echo "Current User Scripts:"
    echo "---------------------"
    ls -d "$SCRIPTS_USER"/*.xml 2>/dev/null
    exit 0
fi

# create new local scripts folder
mkdir -p "$SCRIPTS_USER"

# search all possible script folders
if [ -f "$SCRIPTS_USER/$XML_SCRIPT" ]; then
    SCRIPT="$SCRIPTS_USER/$XML_SCRIPT"
elif [ -f "$SCRIPTS_ALL/$XML_SCRIPT" ]; then
    SCRIPT="$SCRIPTS_ALL/$XML_SCRIPT"
else
    SCRIPT="$SCRIPTS_APP_DIR/$XML_SCRIPT"
fi

# resolve the hostname
# locfg.pl does not properly resolve the hostname when using /etc/hosts
ILO_HOST_IP=$(getent ahosts "$ILO_HOST" | sed -n 's/ *STREAM.*//p')

# execute ilo command
ILO_RESULT=$(perl "/usr/local/bin/locfg.pl" \
    -s "$ILO_HOST_IP" \
    -u "$ILO_USER" \
    -p "$ILO_PASS" \
    -f "$SCRIPT")

STATUS=$?

# check if locfg.pl command is working
if [ "$STATUS" -eq 0 ]; then
    :
else
    echo "Warning: iLO or HTTP connection error"
    echo "$ILO_RESULT"
    exit 1
fi

# if there is no data show warnings
if [ -z "${ILO_RESULT}" ]; then
    echo "Warning: no iLO data"
    exit
elif echo "$ILO_RESULT" | grep -q "Bad Request"; then
    echo "Warning: Server does not support iLO"
    exit
fi

OUT_DATA=$(echo "$ILO_RESULT" | grep -i "$FIND_DATA")

# show iLO output
if [ "$FIND_UNIQ" = "-u" ]; then
    echo "$OUT_DATA" | sort | uniq
else
    echo "$OUT_DATA"
fi
